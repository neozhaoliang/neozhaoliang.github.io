<svg id="container" xmlns="http://www.w3.org/2000/svg" width="640" height="360" style="background: white;">
<style>
    text {
        user-select: none;
        -webkit-user-select: none; /* lol */
    }
</style>

<foreignObject x="0" y="0" width="100%" height="100%">
    <span xmlns="http://www.w3.org/1999/xhtml">
        <canvas id="output" width="600" height="360"></canvas>
    </span>
</foreignObject>

<script>
const fO = document.querySelector('foreignObject');
const canvas = fO.querySelector('#output');
const gl = canvas.getContext('webgl2', {preserveDrawingBuffer: true});

let leftDown = 0;
let rightDown = 0;
let mouseXY = [0, 0, 0, 0];
let u_mouse;

canvas.addEventListener('mousedown', (e) => {
    if (e.button == 0) {
        leftDown = 1;
    }
    else if (e.button == 2) {
        rightDown = 1;
    }
}
);

canvas.addEventListener('mouseup', (e) => {
    if (e.button == 0) {
        leftDown = 0;
    }
    else if (e.button == 2) {
        rightDown = 0;
    }
}
);

canvas.addEventListener('mousemove', (e) => {
    if (leftDown == 1)
        mouseXY = [e.offsetX, e.offsetY];
}
);

canvas.addEventListener('mouseclick', (e) => {
    if (leftDown == 1)
        mouseXY = [e.offsetX, e.offsetY];
}
);

if(!gl) {
    console.error("WebGL 2 not available");
    document.body.innerHTML = "This example requires WebGL 2 which is unavailable on this system.";
}

var v = `#version 300 es

in vec2 position;

void main() {
    gl_Position = vec4(position, 0.0, 1.0);
}
`;

var f = <![CDATA[`#version 300 es

precision highp float;

uniform vec3          iResolution;
uniform float         iTime;
uniform vec4          iMouse;
uniform int           iFrame;
uniform samplerCube   iChannel0;
uniform sampler2D     iChannel1;

out vec4 fragColor;
#define PI                3.141592654
#define L2(x)             dot(x, x)
#define EDGE_THICKNESS    0.05
#define MAX_TRACE_STEPS   128
#define MAX_RAY_BOUNCES   12
#define EPSILON           1e-4
#define FAR               20.
#define min3(x, y, z)     (min(x, min(y, z)))
#define max3(x, y, z)     (max(x, max(y, z)))


//#define INSIDE_VIEW

//#define DUAL

const vec3 pqr = vec3(2, 3, 4);   // (2, 3, 3), (2, 3, 4)
const vec3 truncation_type = vec3(1, 0, 1);

const float size = 1.35;  // polyhera size

mat3 M;  // normals of reflection mirrors
mat3 T;  // three vertices of the fundamental triangle
vec3 v0; // initial vertex

mat3 rotateX(float theta) {
    float c = cos(theta);
    float s = sin(theta);
    return mat3(
        vec3(1, 0, 0),
        vec3(0, c, -s),
        vec3(0, s, c)
    );
}

mat3 rotateY(float theta) {
    float c = cos(theta);
    float s = sin(theta);
    return mat3(
        vec3(c, 0, s),
        vec3(0, 1, 0),
        vec3(-s, 0, c)
    );
}

void init() {
    vec3 c = cos(PI / pqr);
    float sp = sin(PI / pqr.x);
    vec3 m1 = vec3(1, 0, 0);
    vec3 m2 = vec3(-c.x, sp, 0);
    float x3 = -c.z;
    float y3 = -(c.y + c.x*c.z)/sp;
    float z3 = sqrt(1.0 - x3*x3 - y3*y3);
    vec3 m3 = vec3(x3, y3, z3);
    M = mat3(m1, m2, m3);
    T[0] = normalize(cross(m2, m3));
    T[1] = normalize(cross(m3, m1));
    T[2] = normalize(cross(m1, m2));
    v0 = normalize(truncation_type * inverse(M)) * size;
#ifdef DUAL
    #define proj(p, n)  (length(p - dot(p, n) * n))
    float scale = min3(proj(v0, m1), proj(v0, m2), proj(v0, m3));
    v0 /= scale;
#endif
}

vec3 fold(vec3 p) {
    for (int i = 0; i < 5; i++)
    for (int j = 0; j < 3; j++) {
        p -= 2. * min(dot(p, M[j]), 0.) * M[j];
    }
    return p;
}

float dSegment(vec3 p, vec3 a, vec3 b) {
  vec3 pa = p - a;
  vec3 ba = b - a;
  float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);
  float d = length(pa - ba * h);
  return d;
}

vec3 distEdges(vec3 p) {
    p = fold(p);
#ifdef DUAL
	vec3 ed = vec3(1e5);
    vec3 a = T[0] / dot(T[0], v0) * size;
    vec3 b = T[1] / dot(T[1], v0) * size;
    vec3 c = T[2] / dot(T[2], v0) * size;
	if(bool(truncation_type.x))
        ed.x = dSegment(p, b, c);
	if(bool(truncation_type.y))
        ed.y = dSegment(p, c, a) ;
	if(bool(truncation_type.z))
        ed.z = dSegment(p, a, b);
	return ed;
#else
    p -= v0;
    vec3 ed;
    for (int i = 0; i < 3; i++) {
        ed[i] = L2(p - min(0., dot(p, M[i])) * M[i]);
    }
	return sqrt(ed);
#endif
}

float map(vec3 p) {
    p = fold(p);
#ifdef DUAL
    return dot(p, v0) - size;
#else
    p -= v0;
    return max(dot(p, T[0]), max(dot(p, T[1]), dot(p, T[2])));
#endif
}

float trace(vec3 pos, vec3 rd, bool outside) {
    float t = 0.0;
    float sgn = outside ? 1.0 : -1.0;
    for (int i = 0; i < MAX_TRACE_STEPS; i++) {
        float d = map(pos + t * rd);
        if (abs(d) < EPSILON)
            return t;
        if (t > FAR)
            break;
        t += sgn * d  * 0.9;
    }
    return FAR;
}

vec4 wallColor(vec3 dir, vec3 nor, vec3 eds) {
    float d = min3(eds.x, eds.y, eds.z);

    // Texturing of walls
    vec3 albedo = texture(iChannel1, vec2(eds.xy * 2.0)).rgb;
    albedo = pow(albedo, vec3(2.2)) * 0.5;

    // Simple diffuse lighting
    float lighting = 0.2 + max(dot(nor, vec3(0.8, 0.5, 0.0)), 0.0);

    if (dot(dir, nor) < 0.0) {
        // Outer walls, just add a black line to hide seams
        float f = clamp(d * 1000.0 - 3.0, 0.0, 1.0);
        albedo = mix(vec3(0.01), albedo, f);
        return vec4(albedo * lighting, f);
    } else {
        // Inner walls, add fancy lights
        float m = max3(eds.x, eds.y, eds.z);
        vec2 a = fract(vec2(d, m) * 40.6) - 0.5;
        float b = 1.0 - sqrt(dot(a, a));
        b = 0.2 / (dot(a, a) + 0.2);

        float lightShape = 1.0 - clamp(d * 100.0 - 2.0, 0.0, 1.0);
        lightShape *= b;

        vec3 emissive = vec3(3.5, 1.8, 1.0);
        return vec4(mix(albedo * lighting, emissive, lightShape), 0.0);
    }
	return vec4(1.0);
}


mat3 camera_matrix(vec3 eye, vec3 lookat, vec3 up) {
    vec3 forward = normalize(lookat - eye);
    vec3 right = normalize(cross(forward, up));
    up = normalize(cross(right, forward));
    return mat3(right, up, -forward);
}

vec3 get_normal( in vec3 pos ) {
    vec3 eps = vec3(0.001,0.0,0.0);
	return normalize( vec3(
           map(pos+eps.xyy) - map(pos-eps.xyy),
           map(pos+eps.yxy) - map(pos-eps.yxy),
           map(pos+eps.yyx) - map(pos-eps.yyx) ) );
}

vec3 background(vec3 dir) {
	vec3 col = texture(iChannel0, dir).rgb;
    col = pow(col, vec3(2.2));
    float origLuma = dot(col, vec3(0.2126, 0.7152, 0.0722)) * 0.7;
    return 2.5 * col / (1.0 - origLuma);
}

vec3 drawRay(vec3 pos, vec3 rd) {
    vec3 color = vec3(0.0);
#ifndef INSIDE_VIEW
    float t = trace(pos, rd, true);
    if (t == FAR) {
    	return background(rd);
    }
    pos = pos + t * rd;
    vec3 nor = get_normal(pos);
    vec3 reflDir = reflect(rd, nor);
    vec3 bgColor = pow(background(reflDir), vec3(1.0));
    float fresnel = 0.04 + 0.96 * pow(1.0 - max(dot(rd, -nor), 0.0), 5.0);
    color += bgColor * fresnel;
    vec3 eds = distEdges(pos);
    float d = min3(eds.x, eds.y, eds.z);
    if (d < EDGE_THICKNESS) {
        vec4 wc = wallColor(rd, nor, eds);
    	return color * wc.a + wc.rgb;
    }
#endif
    vec3 transmittance = vec3(1.0);
    for (int i = 0; i < MAX_RAY_BOUNCES; i++) {
        float t = trace(pos, rd, false);
        pos = pos + t * rd;
        vec3 eds = distEdges(pos);
        vec3 nor = get_normal(pos);
    	float d = min3(eds.x, eds.y, eds.z);
        if (d < EDGE_THICKNESS) {
        	return color + transmittance * wallColor(rd, nor, eds).rgb;
        }
        rd = reflect(rd, nor);
        pos += rd * 0.005;
        transmittance *= vec3(0.4, 0.7, 0.7);
    }

    return color;
}


void mainImage( out vec4 fragColor, in vec2 fragCoord ) {
    init();
    vec2 uv = (fragCoord.xy - iResolution.xy*0.5) / iResolution.y;
    vec2 move = vec2(iTime * 0.2, sin(iTime * 0.2) * 0.5);

#ifdef INSIDE_VIEW
    float radius = 0.1;
#else
    float radius = 2.3;
#endif
    vec3 eye = radius * vec3(
        cos(move.x)*cos(move.y),
        sin(move.y),
        sin(move.x)*cos(move.y)
    );

    vec2 mouse = vec2(0);
    if (iMouse.x > 0.)
        mouse = 2. * iMouse.xy / iResolution.y - 1.;
    eye = rotateY(mouse.x) * rotateX(-mouse.y) * eye;

    vec3 lookat = vec3(0);
    vec3 up = vec3(0, 1, 0);
    vec3 forward = normalize(lookat - eye);
    vec3 right = normalize(cross(forward, up));
    up = normalize(cross(right, forward));
    vec3 ray = normalize(uv.x*right + uv.y*up + forward * 1.0);
    vec3 color = drawRay(eye, ray);
    color = color / (color * 0.5 + 0.5);
    color = pow(color, vec3(1.0 / 2.2));

    fragColor = vec4(color,1.0);
}
void main()
{
    mainImage(fragColor, gl_FragCoord.xy);
}`]]>;

function compileShader(vSource, fSource)
{
    var vs = gl.createShader(gl.VERTEX_SHADER);
    gl.shaderSource(vs, vSource);
    gl.compileShader(vs);

    if (!gl.getShaderParameter(vs, gl.COMPILE_STATUS)) {
        console.error(gl.getShaderInfoLog(vs));
    }

    var fs = gl.createShader(gl.FRAGMENT_SHADER);
    gl.shaderSource(fs, fSource);
    gl.compileShader(fs);

    if (!gl.getShaderParameter(fs, gl.COMPILE_STATUS)) {
        console.error(gl.getShaderInfoLog(fs));
    }

    program = gl.createProgram();
    gl.attachShader(program, vs);
    gl.attachShader(program, fs);
    gl.linkProgram(program);

    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
        console.error(gl.getProgramInfoLog(program));
    }

    gl.useProgram(program);
    return program;
}

function setVAO(program)
{
    var vertices = new Float32Array([-1, -1, 1, -1, -1, 1, 1, 1]);
    var positionAttributeLocation = gl.getAttribLocation(program, "position");
    var positionBuffer = gl.createBuffer();
    var vao = gl.createVertexArray();
    gl.bindVertexArray(vao);
    gl.enableVertexAttribArray(positionAttributeLocation);
    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
    gl.vertexAttribPointer(positionAttributeLocation, 2, gl.FLOAT, false, 0, 0);
    gl.bufferData(gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW);
}

function loadTexture(src) {
    var texture = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_2D, texture);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);

    var image = new Image();
    image.onload = function() {
        gl.bindTexture(gl.TEXTURE_2D, texture);
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
    };
    image.src = src;
    return texture;
}

function loadCubeMap(base, suffix) {
    var texture = gl.createTexture();
    gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);
    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
    gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
    var faces = [["0", gl.TEXTURE_CUBE_MAP_POSITIVE_X],
                 ["1", gl.TEXTURE_CUBE_MAP_NEGATIVE_X],
                 ["2", gl.TEXTURE_CUBE_MAP_POSITIVE_Y],
                 ["3", gl.TEXTURE_CUBE_MAP_NEGATIVE_Y],
                 ["4", gl.TEXTURE_CUBE_MAP_POSITIVE_Z],
                 ["5", gl.TEXTURE_CUBE_MAP_NEGATIVE_Z]];
    for (var i = 0; i != faces.length; i++) {
        var url = base + faces[i][0] + "." + suffix;
        var face = faces[i][1];
        var image = new Image();
        image.onload = function(texture, face, image, url) {
            return function() {
                gl.bindTexture(gl.TEXTURE_CUBE_MAP, texture);
                gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
                gl.texImage2D(face, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);
            }
        }(texture, face, image, url);
        image.src = url;
    }
    return texture;
}

var program = compileShader(v, f);
setVAO(program);


var resolutionUniformLocation = gl.getUniformLocation(program, "iResolution");
gl.uniform3fv(resolutionUniformLocation, [canvas.width, canvas.height, 0.0]);

var timeLocation = gl.getUniformLocation(program, "iTime");
var mouseLocation = gl.getUniformLocation(program, "iMouse");
gl.uniform4fv(mouseLocation, [0, 0, 0, 0]);

var woodtexLocation = gl.getUniformLocation(program, "iChannel1");
woodtex = loadTexture("./textures/wood.jpg");
gl.activeTexture(gl.TEXTURE1);
gl.bindTexture(gl.TEXTURE_2D, woodtex);
gl.uniform1i(woodtexLocation, 1)

var cubemapLocation = gl.getUniformLocation(program, "iChannel0");
cubemaptex = loadCubeMap("./textures/st_peters", "png");
gl.activeTexture(gl.TEXTURE0);
gl.bindTexture(gl.TEXTURE_CUBE_MAP, cubemaptex);
gl.uniform1i(cubemapLocation, 0)


async function render()
{

    gl.viewport(0, 0, canvas.width, canvas.height);
    gl.clearColor(1, 1, 1, 1);
    gl.clear(gl.COLOR_BUFFER_BIT);

    gl.uniform1f(timeLocation, performance.now()*0.001);
    gl.uniform4fv(mouseLocation, [mouseXY[0], mouseXY[1], leftDown, rightDown]);
    gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);
    requestAnimationFrame(render);
};

render();

</script>
</svg>